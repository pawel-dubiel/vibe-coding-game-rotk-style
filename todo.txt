# TODO
1 done I want to see in info panel what generals are attached to a unit
2 done I want to ensure that frontage is in use so we not calculating strength during combat just from unit soldiers but we take frontage into account
3 Maybe we should try to simulate a single battle between units, in rounds we need some good algorithm used from real war simulators, but still simple
4 done When I click enemy unit i want to see info about enemy unit
5 players should be able to attack enemy castle and force enemy to surrender
6 Will be nice to have a unit type like ram for taking the gate in the castle
7 Cavarly shouldn't be able to attack castle
8 We should have a status like distrupted and for example if unit is disrupted it get severe penalty in combat
9 Cavarly is automatically distrupted when it is in the forest, or when it is in the castle or in the hill
10 When animating movement i would like to see an arrow between each field to show choosen path
11 Fog of war
12 Cavarly cannot charge towards hills ( when enemy is on the hill ) and cannot charge when is on the hill itself
13 When archer is on the hill, and enemy archer attacks not from the hill (is lower), the attack should be less effective


# Failing tests

 AP System (1 test)

  - test_ap_system.py::TestAPSystem::test_charge_ap_cost

  Fog of War/Attack Targeting (1 test)

  - test_fog_attack_targeting.py::test_charge_targeting_respects_fog

  Height Advantage (1 test)

  - test_height_advantage.py::test_archer_shooting_downhill_bonus

  Movement Facing (4 tests)

  - test_movement_facing.py::TestMovementFacing::test_auto_face_nearest_of_multiple_enemies
  - test_movement_facing.py::TestMovementFacing::test_manual_facing_selection
  - test_movement_facing.py::TestMovementFacing::test_no_auto_face_far_enemy
  - test_movement_facing.py::TestMovementFacing::test_simple_move_updates_facing

  Movement Pathfinding (3 tests)

  - test_movement_pathfinding.py::TestMovementPathfinding::test_different_pathfinders_same_result
  - test_movement_pathfinding.py::TestMovementPathfinding::test_movement_with_astar_pathfinder
  - test_movement_pathfinding.py::TestMovementPathfinding::test_movement_with_dijkstra_pathfinder

  Pathfinding (3 tests)

  - test_pathfinding.py::TestPathfinding::test_astar_avoids_enemy_units
  - test_pathfinding.py::TestPathfinding::test_astar_finds_direct_path
  - test_pathfinding.py::TestPathfinding::test_pathfinder_hex_movement

  Pathfinding Simple (1 test)

  - test_pathfinding_simple.py::TestPathfindingSimple::test_dijkstra_basic_path

  Rotation Mechanics (1 test)

  - test_rotation_mechanics.py::TestRotationMechanics::test_rotation_ap_cost

  Terrain Behavior (1 test)

  - test_terrain_behavior.py::TestTerrainBehavior::test_cavalry_terrain_penalties

  The majority of failures are in the movement and pathfinding systems (10 out of 16 tests).


1. Field of View / Shadow Casting

  Currently uses simple line-of-sight checks. Could implement:
  - Shadow casting algorithm for more realistic vision
  - Recursive shadowcasting for better performance
  - Would give more natural vision blocking

  2. Hex Grid Storage

  Currently uses 2D array with offset coordinates. Could consider:
  - Sparse storage for larger maps
  - Chunk-based storage for infinite maps

  3. Movement Range Display

  Could add Dijkstra's algorithm to show all reachable hexes:
  - Already have DijkstraPathFinder but could use it for movement preview
  - Flood fill algorithm for showing movement range

  4. Hex Grid Rendering

  Currently renders as squares visually. Could improve:
  - Actual hexagonal tile rendering
  - Proper hex grid lines
  - Better visual feedback

  5. Rotation Systems

  Has 6-direction facing but could add:
  - Fractional rotations for smoother animations
  - Rotation interpolation for visual effects

  6. Range Templates

  For area effects could implement:
  - Hex range shapes (circle, cone, line)
  - Range finding with obstacles

